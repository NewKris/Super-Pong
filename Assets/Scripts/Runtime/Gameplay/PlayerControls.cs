//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Runtime.Gameplay
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player 1 Controls"",
            ""id"": ""c9eea06e-f5ae-4927-adf3-ece888e2816e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e8313a5e-eb0c-442c-8e7a-600961973fa5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""9c4fbd18-cb4a-4ee7-a988-6d4bd6cadda1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""7baf8a14-92ae-413d-88aa-8fae78bd1238"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ad5eaacb-aa17-4ba2-8482-fbc307e3c749"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b4998a03-d4f4-4257-b0a8-d219e7aa12a2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4864d5c7-e90d-4e22-9baa-6c3f27548b79"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player 2 Controls"",
            ""id"": ""fbc8ef7f-6eab-4cf6-902d-e6b4a4a7eb6e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""88741203-79bc-4e1d-b5c8-6b9f4755d60b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""05b03983-60d0-41b5-8d6b-8f54f77c42cf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2552becc-8169-47a9-b946-ebf82a643f2e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b8ae31a0-3924-430b-a903-f83c2f993393"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player 1 Controls
            m_Player1Controls = asset.FindActionMap("Player 1 Controls", throwIfNotFound: true);
            m_Player1Controls_Move = m_Player1Controls.FindAction("Move", throwIfNotFound: true);
            m_Player1Controls_Pause = m_Player1Controls.FindAction("Pause", throwIfNotFound: true);
            // Player 2 Controls
            m_Player2Controls = asset.FindActionMap("Player 2 Controls", throwIfNotFound: true);
            m_Player2Controls_Move = m_Player2Controls.FindAction("Move", throwIfNotFound: true);
        }

        ~@PlayerControls()
        {
            UnityEngine.Debug.Assert(!m_Player1Controls.enabled, "This will cause a leak and performance issues, PlayerControls.Player1Controls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Player2Controls.enabled, "This will cause a leak and performance issues, PlayerControls.Player2Controls.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player 1 Controls
        private readonly InputActionMap m_Player1Controls;
        private List<IPlayer1ControlsActions> m_Player1ControlsActionsCallbackInterfaces = new List<IPlayer1ControlsActions>();
        private readonly InputAction m_Player1Controls_Move;
        private readonly InputAction m_Player1Controls_Pause;
        public struct Player1ControlsActions
        {
            private @PlayerControls m_Wrapper;
            public Player1ControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player1Controls_Move;
            public InputAction @Pause => m_Wrapper.m_Player1Controls_Pause;
            public InputActionMap Get() { return m_Wrapper.m_Player1Controls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player1ControlsActions set) { return set.Get(); }
            public void AddCallbacks(IPlayer1ControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_Player1ControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player1ControlsActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(IPlayer1ControlsActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(IPlayer1ControlsActions instance)
            {
                if (m_Wrapper.m_Player1ControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer1ControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_Player1ControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player1ControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player1ControlsActions @Player1Controls => new Player1ControlsActions(this);

        // Player 2 Controls
        private readonly InputActionMap m_Player2Controls;
        private List<IPlayer2ControlsActions> m_Player2ControlsActionsCallbackInterfaces = new List<IPlayer2ControlsActions>();
        private readonly InputAction m_Player2Controls_Move;
        public struct Player2ControlsActions
        {
            private @PlayerControls m_Wrapper;
            public Player2ControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player2Controls_Move;
            public InputActionMap Get() { return m_Wrapper.m_Player2Controls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player2ControlsActions set) { return set.Get(); }
            public void AddCallbacks(IPlayer2ControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_Player2ControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player2ControlsActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }

            private void UnregisterCallbacks(IPlayer2ControlsActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
            }

            public void RemoveCallbacks(IPlayer2ControlsActions instance)
            {
                if (m_Wrapper.m_Player2ControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer2ControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_Player2ControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player2ControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player2ControlsActions @Player2Controls => new Player2ControlsActions(this);
        public interface IPlayer1ControlsActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IPlayer2ControlsActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
    }
}
